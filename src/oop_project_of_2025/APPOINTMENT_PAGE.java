/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_project_of_2025;

//import java.util.*;
import java.io.*;
//import java.io.BufferedReader;
//import java.io.File;
//import java.io.BufferedWriter;
//import java.io.FileReader;
//import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Zcv
 */
public class APPOINTMENT_PAGE extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(APPOINTMENT_PAGE.class.getName());
    /**
     * Creates new form APPOINTMENT_PAGE
     */
    private static final int Max_Reason_length = 150;
    
    public APPOINTMENT_PAGE() {
        initComponents();
        loadAppointmentsFromFile(); 
        
        Booking_Reason.getDocument().addDocumentListener(new DocumentListener() {
            private void checkTextLength() {
                String text_length = Booking_Reason.getText();
                if (text_length.length() > Max_Reason_length) {
                    Booking_Reason.setText(text_length.substring(0, Max_Reason_length));
                    JOptionPane.showMessageDialog(APPOINTMENT_PAGE.this,
                            "Reason cannot exceed " + Max_Reason_length + " characters.",
                            "Text Too Long",
                            JOptionPane.WARNING_MESSAGE);
                }
            }

            @Override
            public void insertUpdate(DocumentEvent e) { checkTextLength(); }

            @Override
            public void removeUpdate(DocumentEvent e) { /* no need to handle */ }

            @Override
            public void changedUpdate(DocumentEvent e) { /* no need to handle */ }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        What_time_you_want = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Appointment_table = new javax.swing.JTable();
        Book_button = new javax.swing.JButton();
        Update_button = new javax.swing.JButton();
        Cancel_option = new javax.swing.JButton();
        Lecturer_options = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        What_date_you_want = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Booking_Reason = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Appointment_table1 = new javax.swing.JTable();
        Student_HOME_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("APPOINTMENT PAGE");

        jLabel4.setText("TIME:");

        What_time_you_want.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                What_time_you_wantActionPerformed(evt);
            }
        });

        jLabel5.setText("select available options in the table:");

        Appointment_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "TIME", "LECTURER", "REASON"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Appointment_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Appointment_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Appointment_table);
        if (Appointment_table.getColumnModel().getColumnCount() > 0) {
            Appointment_table.getColumnModel().getColumn(0).setResizable(false);
            Appointment_table.getColumnModel().getColumn(1).setResizable(false);
        }

        Book_button.setText("Book");
        Book_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Book_buttonActionPerformed(evt);
            }
        });

        Update_button.setText("Update");
        Update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_buttonActionPerformed(evt);
            }
        });

        Cancel_option.setText("Cancel Appointment");
        Cancel_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_optionActionPerformed(evt);
            }
        });

        Lecturer_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Lecturer_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lecturer_optionsActionPerformed(evt);
            }
        });

        jLabel2.setText("DATE: ");

        What_date_you_want.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                What_date_you_wantActionPerformed(evt);
            }
        });

        jLabel3.setText("LECTURER:");

        jLabel6.setText("Booking Reason:");

        Booking_Reason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Booking_ReasonActionPerformed(evt);
            }
        });

        jLabel7.setText("dd/mm/yy");

        jLabel8.setText("hh:mm");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(What_time_you_want, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(What_date_you_want, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(Book_button))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Lecturer_options, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(Booking_Reason)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(Update_button)
                                        .addGap(66, 66, 66)
                                        .addComponent(Cancel_option)))
                                .addGap(0, 78, Short.MAX_VALUE)))))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(What_date_you_want, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(What_time_you_want, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Lecturer_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Book_button)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Booking_Reason, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Update_button)
                            .addComponent(Cancel_option)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Book Appointment ", jPanel1);

        Appointment_table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "TIME", "LECTURER", "REASON", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Appointment_table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Appointment_table1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Appointment_table1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Appoinment Status", jPanel2);

        Student_HOME_button.setText("Home");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Student_HOME_button)
                .addGap(168, 168, 168)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Student_HOME_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void What_time_you_wantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_What_time_you_wantActionPerformed
        // TODO add your handling code here:
        String Book_Time = What_time_you_want.getText().trim();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yy");
        try {
            LocalTime parsedDate = LocalTime.parse(Book_Time, formatter);
            // Optional: Print confirmation to console
            System.out.println("Valid Time entered: " + parsedDate);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this,
                "Invalid Time format! Please use dd/MM/yy (e.g. 21/10/25).",
                "Time Format Error",
                JOptionPane.ERROR_MESSAGE);
            What_time_you_want.setText("");
        }
    }//GEN-LAST:event_What_time_you_wantActionPerformed

    private void Appointment_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Appointment_tableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
        int selectedRowIndex = Appointment_table.getSelectedRow();

        What_date_you_want.setText(model.getValueAt(selectedRowIndex, 0).toString());
        What_time_you_want.setText(model.getValueAt(selectedRowIndex, 1).toString());
        Lecturer_options.setSelectedItem(model.getValueAt(selectedRowIndex, 2).toString());
    }//GEN-LAST:event_Appointment_tableMouseClicked

    private void Book_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Book_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
        

        String Book_Date = What_date_you_want.getText().trim();
        String Book_Time = What_time_you_want.getText().trim();
        String Book_Reason = Booking_Reason.getText().trim();

        if (Book_Reason.isEmpty() || Book_Date.isEmpty() || Book_Time.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the blanks", "Look out", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yy");
        try {
            LocalDate.parse(Book_Date, dateFormatter);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this,
                "Invalid date format! Please use dd/MM/yy (e.g. 21/10/25).",
                "Date Format Error",
                JOptionPane.ERROR_MESSAGE);
            What_date_you_want.setText("");
            return;
        }

        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        try {
            LocalTime.parse(Book_Time, timeFormatter);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this,
                "Invalid Time format! Please use HH:mm (e.g. 12:30).",
                "Time Format Error",
                JOptionPane.ERROR_MESSAGE);
            What_time_you_want.setText("");
            return;
        }
        
        String Text_length = Booking_Reason.getText();
            if (Text_length.length() > Max_Reason_length) {
                JOptionPane.showMessageDialog(this, "Text cannnot exceed 150 letters limit", "Text too long my friend", JOptionPane.WARNING_MESSAGE);
            return;
        }

        model.addRow(new Object[] {
            What_date_you_want.getText(),
            What_time_you_want.getText(),
            Lecturer_options.getSelectedItem(),
            Booking_Reason.getText(),
            "Pending"
        });
        

        saveAppointmentsToFile();
    }//GEN-LAST:event_Book_buttonActionPerformed

    private void Update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_buttonActionPerformed
        // TODO add your handling code here:
        int i = Appointment_table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();

        if (i >= 0){
            model.setValueAt(What_date_you_want.getText(), i, 0);
            model.setValueAt(What_time_you_want.getText(), i, 1);
            model.setValueAt(Lecturer_options.getSelectedItem(), i, 2);
            model.setValueAt(Booking_Reason.getText(), i, 3);
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
            saveAppointmentsToFile();
        } else {
            JOptionPane.showMessageDialog(this, "Please select an appointment to update.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Update_buttonActionPerformed

    private void Cancel_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_optionActionPerformed
        // TODO add your handling code here:
        int i = Appointment_table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();

        if (i >= 0) {
            int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to cancel this appointment?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                model.removeRow(i);
                JOptionPane.showMessageDialog(this, "Appointment cancelled");
                saveAppointmentsToFile();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.", "ERROR!!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Cancel_optionActionPerformed

    private void What_date_you_wantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_What_date_you_wantActionPerformed
        // TODO add your handling code here:
        String Book_Date = What_date_you_want.getText().trim();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yy");
        try {
            LocalDate parsedDate = LocalDate.parse(Book_Date, formatter);

            System.out.println("Valid date entered: " + parsedDate);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this,
                "Invalid date format! Please use dd/MM/yy (e.g. 21/10/25).",
                "Date Format Error",
                JOptionPane.ERROR_MESSAGE);
            What_date_you_want.setText("");
        }
    }//GEN-LAST:event_What_date_you_wantActionPerformed

    private void Lecturer_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lecturer_optionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Lecturer_optionsActionPerformed

    private void Appointment_table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Appointment_table1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Appointment_table1MouseClicked

    private void Booking_ReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Booking_ReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Booking_ReasonActionPerformed


private void loadAppointmentsFromFile() {
    try {
        File file = new File("C:\\Users\\peter\\Documents\\NetBeansProjects\\OOP_PROJECT_OF_2025\\src\\oop_project_of_2025\\APPOINTMENT.txt");

        // ✅ FIX: Only create parent folders if parent exists (avoid NullPointer)
        File parent = file.getParentFile();
        if (parent != null && !parent.exists()) {
            parent.mkdirs();
        }

        // If the file doesn't exist, create it and stop reading
        if (!file.exists()) {
            file.createNewFile();
            System.out.println("Created new appointment file: " + file.getAbsolutePath());
            return;
        }

        // Load file content into table
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
            model.setRowCount(0); // clear existing rows
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 4) {
                    model.addRow(data);
                }
            }
            System.out.println("Appointments loaded successfully!");
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            DefaultTableModel model = (DefaultTableModel) Appointment_table1.getModel();
            model.setRowCount(0); // clear existing rows
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 5) {
                    model.addRow(data);
                }
            }
            System.out.println("Appointments loaded successfully!");
        }
        
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading appointments!\n" + e.getMessage(),
                "File Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void saveAppointmentsToFile() {
    try {
        File file = new File("C:\\Users\\peter\\Documents\\NetBeansProjects\\OOP_PROJECT_OF_2025\\src\\oop_project_of_2025\\APPOINTMENT.txt");

        // ✅ FIX: Only create parent folders if parent exists (avoid NullPointer)
        File parent = file.getParentFile();
        if (parent != null && !parent.exists()) {
            parent.mkdirs();
        }

        // Write table contents to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                String date = model.getValueAt(i, 0).toString();
                String time = model.getValueAt(i, 1).toString();
                String lecturer = model.getValueAt(i, 2).toString();
                String Reason = model.getValueAt(i, 3).toString();
                writer.write(date + "," + time + "," + lecturer + "," + Reason + "," + "Pending");
                writer.newLine();
            }
        }
        System.out.println("Appointments saved successfully!");

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving appointments!\n" + e.getMessage(),
                "File Error", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new APPOINTMENT_PAGE().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Appointment_table;
    private javax.swing.JTable Appointment_table1;
    private javax.swing.JButton Book_button;
    private javax.swing.JTextField Booking_Reason;
    private javax.swing.JButton Cancel_option;
    private javax.swing.JComboBox<String> Lecturer_options;
    private javax.swing.JButton Student_HOME_button;
    private javax.swing.JButton Update_button;
    private javax.swing.JTextField What_date_you_want;
    private javax.swing.JTextField What_time_you_want;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
//
//    private void saveAppointmentsToFile() {
//        try {
//            File file = new File("APPOINTMENT.txt");
//            file.getParentFile().mkdirs();
//            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
//                DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
//                for (int i = 0; i < model.getRowCount(); i++) {
//                    String date = model.getValueAt(i, 0).toString();
//                    String time = model.getValueAt(i, 1).toString();
//                    String lecturer = model.getValueAt(i, 2).toString();
//                    writer.write(date + "," + time + "," + lecturer + ",PENDING");
//                    writer.newLine();
//                }
//                writer.flush();
//                System.out.println("Appointments saved successfully!");
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Error saving appointments!", "File Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }
//}
            
            
//
//            try (java.io.BufferedWriter writer = new java.io.BufferedWriter(new java.io.FileWriter(file))) {
//                DefaultTableModel model = (DefaultTableModel) Appointment_table.getModel();
//                for (int i = 0; i < model.getRowCount(); i++) {
//                    String date = model.getValueAt(i, 0).toString();
//                    String time = model.getValueAt(i, 1).toString();
//                    String lecturer = model.getValueAt(i, 2).toString();
//                    writer.write(date + "," + time + "," + lecturer + ",PENDING");
//                    writer.newLine();
//                }
//                writer.flush();
//                System.out.println("Appointments saved successfully!");
//            }
//        } catch (IOException e) {
////            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Error saving appointments!", "File Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }
//}
